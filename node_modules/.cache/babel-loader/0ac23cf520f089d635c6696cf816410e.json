{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\XpertShop\\\\src\\\\containers\\\\loginForm\\\\loginForm.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Input from \"../ui/input/input\";\nimport ShopLogo from \"../../assets/shop.png\";\nimport \"./loginForm.css\";\nimport * as actions from \"../store/actions/index\";\nimport Spinner from \"../../containers/ui/spinner/spinner\";\n\nclass LoginForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loginForm: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false,\n          labelName: \"Adresa e Email\"\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Fjalëkalimi\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6,\n            isPassword: true\n          },\n          valid: false,\n          touched: false,\n          labelName: \"Fjalëkalimi\"\n        }\n      },\n      formIsValid: false,\n      loading: false,\n      isSignup: false\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedLoginForm = { ...this.state.loginForm\n      };\n      const updatedLoginFormElement = { ...updatedLoginForm[inputIdentifier]\n      };\n      updatedLoginFormElement.value = event.target.value;\n      updatedLoginFormElement.valid = this.checkValidity(updatedLoginFormElement.value, updatedLoginFormElement.validation);\n      updatedLoginFormElement.touched = true;\n      updatedLoginForm[inputIdentifier] = updatedLoginFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedLoginForm) {\n        formIsValid = updatedLoginForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        loginForm: updatedLoginForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.loginHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.loginForm.email.value, this.state.loginForm.password.value, this.state.isSignup);\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isPassword) {\n      const passw = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{7,15}$/;\n      isValid = passw.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const loginFormElementsArray = [];\n\n    for (let key in this.state.loginForm) {\n      loginFormElementsArray.push({\n        id: key,\n        config: this.state.loginForm[key]\n      });\n    }\n\n    let login = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.loginHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"shopLogo\",\n        src: ShopLogo,\n        alt: \"Xpert Shop Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelTitle\",\n        children: \"Vendosni numrin e celularit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), login, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"loginButton\",\n        children: \"KYCU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelQuestion\",\n        children: \"Nuk keni Adrese?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"registerLink\",\n        href: \"/regjistrohu\",\n        children: \"Rregjistrohuni\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/XpertShop/src/containers/loginForm/loginForm.js"],"names":["React","Component","connect","Input","ShopLogo","actions","Spinner","LoginForm","state","loginForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","labelName","password","minLength","isPassword","formIsValid","loading","isSignup","inputChangedHandler","event","inputIdentifier","updatedLoginForm","updatedLoginFormElement","target","checkValidity","setState","loginHandler","preventDefault","props","onAuth","rules","isValid","trim","length","pattern","test","passw","render","loginFormElementsArray","key","push","id","config","login","mapStateToProps","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Input from \"../ui/input/input\";\r\nimport ShopLogo from \"../../assets/shop.png\";\r\nimport \"./loginForm.css\";\r\nimport * as actions from \"../store/actions/index\";\r\nimport Spinner from \"../../containers/ui/spinner/spinner\";\r\n\r\nclass LoginForm extends Component {\r\n  state = {\r\n    loginForm: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Email\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n        labelName: \"Adresa e Email\",\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Fjalëkalimi\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n          isPassword: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n        labelName: \"Fjalëkalimi\",\r\n      },\r\n    },\r\n\r\n    formIsValid: false,\r\n    loading: false,\r\n    isSignup: false,\r\n  };\r\n\r\n  checkValidity(value, rules) {\r\n    let isValid = true;\r\n\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    if (rules.isEmail) {\r\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n      isValid = pattern.test(value) && isValid;\r\n    }\r\n\r\n    if (rules.isPassword) {\r\n      const passw = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{7,15}$/;\r\n      isValid = passw.test(value) && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedLoginForm = {\r\n      ...this.state.loginForm,\r\n    };\r\n    const updatedLoginFormElement = {\r\n      ...updatedLoginForm[inputIdentifier],\r\n    };\r\n    updatedLoginFormElement.value = event.target.value;\r\n    updatedLoginFormElement.valid = this.checkValidity(\r\n      updatedLoginFormElement.value,\r\n      updatedLoginFormElement.validation\r\n    );\r\n    updatedLoginFormElement.touched = true;\r\n    updatedLoginForm[inputIdentifier] = updatedLoginFormElement;\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedLoginForm) {\r\n      formIsValid = updatedLoginForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({\r\n      loginForm: updatedLoginForm,\r\n      formIsValid: formIsValid,\r\n    });\r\n  };\r\n\r\n  loginHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.loginForm.email.value,\r\n      this.state.loginForm.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const loginFormElementsArray = [];\r\n    for (let key in this.state.loginForm) {\r\n      loginFormElementsArray.push({\r\n        id: key,\r\n        config: this.state.loginForm[key],\r\n      });\r\n    }\r\n\r\n    let login = <Spinner />;\r\n\r\n    return (\r\n      <form onSubmit={this.loginHandler}>\r\n        <img className=\"shopLogo\" src={ShopLogo} alt=\"Xpert Shop Logo\" />\r\n        <label className=\"labelTitle\">Vendosni numrin e celularit</label>\r\n        {login}\r\n        <button type=\"submit\" className=\"loginButton\">\r\n          KYCU\r\n        </button>\r\n        <label className=\"labelQuestion\">Nuk keni Adrese?</label>\r\n        <a className=\"registerLink\" href=\"/regjistrohu\">\r\n          Rregjistrohuni\r\n        </a>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n"]},"metadata":{},"sourceType":"module"}