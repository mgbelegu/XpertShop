{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\xpert-shop\\\\src\\\\containers\\\\registerForm\\\\registerForm.js\";\nimport React, { Component } from \"react\";\nimport Input from \"../ui/input/input\";\nimport \"./registerForm.css\";\nimport axios from \"../../axios-users\";\nimport Spinner from \"../ui/spinner/spinner\";\n\nclass RegisterForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      registerForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Emri i Plotë\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Fjalëkalimi\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        passwordRepeat: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Fjalëkalimi sërish\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        phoneNumber: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"tel\",\n            placeholder: \"+35569*******\",\n            pattern: \"[+]{1}[0-9]{3}[0-9]{9}\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        business: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"individ\",\n              displayValue: \"Individ\"\n            }, {\n              value: \"biznes\",\n              displayValue: \"Biznes\"\n            }]\n          },\n          value: \"individ\"\n        }\n      },\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.registerForm) {\n        formData[formElementIdentifier] = this.state.registerForm[formElementIdentifier].value;\n      }\n\n      const register = {\n        userData: formData\n      };\n      axios.post(\"/registeredUsers.json\", register).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push(\"/\");\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedRegisterForm = { ...this.state.registerForm\n      };\n      const updatedRegisterFormElement = { ...updatedRegisterForm[inputIdentifier]\n      };\n      updatedRegisterFormElement.value = event.target.value;\n      updatedRegisterFormElement.valid = this.checkValidity(updatedRegisterFormElement.value, updatedRegisterFormElement.validation);\n      updatedRegisterFormElement.touched = true;\n      updatedRegisterForm[inputIdentifier] = updatedRegisterFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedRegisterForm) {\n        formIsValid = updatedRegisterForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        registerForm: updatedRegisterForm\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const registerFormElementsArray = [];\n\n    for (let key in this.state.registerForm) {\n      registerFormElementsArray.push({\n        id: key,\n        config: this.state.registerForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.orderHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelTitle\",\n        children: \"Rregjistrohuni p\\xEBr t\\xEB vazhduar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelSubtitle\",\n        children: \"B\\xEBhu pjes\\xEB e Xpert eShop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), registerFormElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        changed: event => this.inputChangedHandler(event, formElement.id),\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        invalid: !formElement.config.valid\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelNotify\",\n        children: \"Fushat e sh\\xEBnuara me * jan\\xEB t\\xEB detyrueshme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelButtons\",\n        children: \"DUKE U RREGJISTRUAR, JU KENI R\\xCBN\\xCB DAKORD ME TERMAT E P\\xCBRDORIMIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"loginButton\",\n        style: {\n          marginBottom: \"15px\"\n        },\n        type: \"submit\",\n        children: \"RREGJISTROHU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelButtons\",\n        children: \"APO JENI TASHM\\xCB T\\xCB RREGJISTRUAR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        className: \"loginButton\",\n        style: {\n          marginBottom: \"15px\"\n        },\n        children: \"KYCU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this);\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: form\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default RegisterForm;","map":{"version":3,"sources":["C:/Users/User/Desktop/xpert-shop/src/containers/registerForm/registerForm.js"],"names":["React","Component","Input","axios","Spinner","RegisterForm","state","registerForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","password","minLength","passwordRepeat","phoneNumber","pattern","business","options","displayValue","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","register","userData","post","then","response","props","history","push","catch","error","inputChangedHandler","inputIdentifier","updatedRegisterForm","updatedRegisterFormElement","target","checkValidity","formIsValid","rules","isValid","trim","length","render","registerFormElementsArray","key","id","config","form","map","formElement","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Input from \"../ui/input/input\";\r\nimport \"./registerForm.css\";\r\nimport axios from \"../../axios-users\";\r\nimport Spinner from \"../ui/spinner/spinner\";\r\n\r\nclass RegisterForm extends Component {\r\n  state = {\r\n    registerForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Emri i Plotë\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Email\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Fjalëkalimi\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      passwordRepeat: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Fjalëkalimi sërish\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      phoneNumber: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"tel\",\r\n          placeholder: \"+35569*******\",\r\n          pattern: \"[+]{1}[0-9]{3}[0-9]{9}\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      business: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"individ\", displayValue: \"Individ\" },\r\n            { value: \"biznes\", displayValue: \"Biznes\" },\r\n          ],\r\n        },\r\n        value: \"individ\",\r\n      },\r\n    },\r\n    loading: false,\r\n  };\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n    this.setState({ loading: true });\r\n    const formData = {};\r\n    for (let formElementIdentifier in this.state.registerForm) {\r\n      formData[formElementIdentifier] = this.state.registerForm[\r\n        formElementIdentifier\r\n      ].value;\r\n    }\r\n    const register = {\r\n      userData: formData,\r\n    };\r\n    axios\r\n      .post(\"/registeredUsers.json\", register)\r\n      .then((response) => {\r\n        this.setState({ loading: false });\r\n        this.props.history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ loading: false });\r\n      });\r\n  };\r\n\r\n  checkValidity(value, rules) {\r\n    let isValid = true;\r\n\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedRegisterForm = {\r\n      ...this.state.registerForm,\r\n    };\r\n    const updatedRegisterFormElement = {\r\n      ...updatedRegisterForm[inputIdentifier],\r\n    };\r\n    updatedRegisterFormElement.value = event.target.value;\r\n    updatedRegisterFormElement.valid = this.checkValidity(\r\n      updatedRegisterFormElement.value,\r\n      updatedRegisterFormElement.validation\r\n    );\r\n    updatedRegisterFormElement.touched = true;\r\n    updatedRegisterForm[inputIdentifier] = updatedRegisterFormElement;\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedRegisterForm) {\r\n      formIsValid = updatedRegisterForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({\r\n      registerForm: updatedRegisterForm,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const registerFormElementsArray = [];\r\n    for (let key in this.state.registerForm) {\r\n      registerFormElementsArray.push({\r\n        id: key,\r\n        config: this.state.registerForm[key],\r\n      });\r\n    }\r\n\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        <label className=\"labelTitle\">Rregjistrohuni për të vazhduar</label>\r\n        <label className=\"labelSubtitle\">Bëhu pjesë e Xpert eShop</label>\r\n        {registerFormElementsArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            invalid={!formElement.config.valid}\r\n          />\r\n        ))}\r\n        <label className=\"labelNotify\">\r\n          Fushat e shënuara me * janë të detyrueshme\r\n        </label>\r\n        <label className=\"labelButtons\">\r\n          DUKE U RREGJISTRUAR, JU KENI RËNË DAKORD ME TERMAT E PËRDORIMIT\r\n        </label>\r\n        <button\r\n          className=\"loginButton\"\r\n          style={{ marginBottom: \"15px\" }}\r\n          type=\"submit\"\r\n        >\r\n          RREGJISTROHU\r\n        </button>\r\n        <label className=\"labelButtons\">APO JENI TASHMË TË RREGJISTRUAR</label>\r\n        <a href=\"/\" className=\"loginButton\" style={{ marginBottom: \"15px\" }}>\r\n          KYCU\r\n        </a>\r\n      </form>\r\n    );\r\n\r\n    if (this.state.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    return <div>{form}</div>;\r\n  }\r\n}\r\n\r\nexport default RegisterForm;\r\n"]},"metadata":{},"sourceType":"module"}