{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\XpertShop\\\\src\\\\containers\\\\loginForm\\\\loginForm.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Input from \"../ui/input/input\";\nimport ShopLogo from \"../../assets/shop.png\";\nimport \"./loginForm.css\";\nimport * as actions from \"../store/actions/index\";\n\nclass LoginForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loginForm: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Email\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false,\n          labelName: \"Adresa e Email\"\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Fjalëkalimi\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6,\n            isPassword: true\n          },\n          valid: false,\n          touched: false,\n          labelName: \"Fjalëkalimi\"\n        }\n      },\n      formIsValid: false,\n      loading: false,\n      isSignup: false\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedLoginForm = { ...this.state.loginForm\n      };\n      const updatedLoginFormElement = { ...updatedLoginForm[inputIdentifier]\n      };\n      updatedLoginFormElement.value = event.target.value;\n      updatedLoginFormElement.valid = this.checkValidity(updatedLoginFormElement.value, updatedLoginFormElement.validation);\n      updatedLoginFormElement.touched = true;\n      updatedLoginForm[inputIdentifier] = updatedLoginFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedLoginForm) {\n        formIsValid = updatedLoginForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        loginForm: updatedLoginForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.loginHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.registerForm.email.value, this.state.registerForm.password.value, this.state.isSignup);\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isPassword) {\n      const passw = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{7,15}$/;\n      isValid = passw.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const loginFormElementsArray = [];\n\n    for (let key in this.state.loginForm) {\n      loginFormElementsArray.push({\n        id: key,\n        config: this.state.loginForm[key]\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.loginHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"shopLogo\",\n        src: ShopLogo,\n        alt: \"Xpert Shop Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelTitle\",\n        children: \"Vendosni numrin e celularit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), loginFormElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        labelName: formElement.config.labelName,\n        passwordMsg: formElement.config.passwordValidation,\n        changed: event => this.inputChangedHandler(event, formElement.id),\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        invalid: !formElement.config.valid\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"loginButton\",\n        children: \"KYCU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"labelQuestion\",\n        children: \"Nuk keni Adrese?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"registerLink\",\n        href: \"/regjistrohu\",\n        children: \"Rregjistrohuni\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(LoginForm);","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/XpertShop/src/containers/loginForm/loginForm.js"],"names":["React","Component","connect","Input","ShopLogo","actions","LoginForm","state","loginForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","labelName","password","minLength","isPassword","formIsValid","loading","isSignup","inputChangedHandler","event","inputIdentifier","updatedLoginForm","updatedLoginFormElement","target","checkValidity","setState","loginHandler","preventDefault","props","onAuth","registerForm","rules","isValid","trim","length","pattern","test","passw","render","loginFormElementsArray","key","push","id","config","map","formElement","passwordValidation","mapDispatchToProps","dispatch","auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Input from \"../ui/input/input\";\r\nimport ShopLogo from \"../../assets/shop.png\";\r\nimport \"./loginForm.css\";\r\nimport * as actions from \"../store/actions/index\";\r\n\r\nclass LoginForm extends Component {\r\n  state = {\r\n    loginForm: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Email\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n        labelName: \"Adresa e Email\",\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Fjalëkalimi\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n          isPassword: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n        labelName: \"Fjalëkalimi\",\r\n      },\r\n    },\r\n\r\n    formIsValid: false,\r\n    loading: false,\r\n    isSignup: false,\r\n  };\r\n\r\n  checkValidity(value, rules) {\r\n    let isValid = true;\r\n\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n\r\n    if (rules.isEmail) {\r\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n      isValid = pattern.test(value) && isValid;\r\n    }\r\n\r\n    if (rules.isPassword) {\r\n      const passw = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{7,15}$/;\r\n      isValid = passw.test(value) && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedLoginForm = {\r\n      ...this.state.loginForm,\r\n    };\r\n    const updatedLoginFormElement = {\r\n      ...updatedLoginForm[inputIdentifier],\r\n    };\r\n    updatedLoginFormElement.value = event.target.value;\r\n    updatedLoginFormElement.valid = this.checkValidity(\r\n      updatedLoginFormElement.value,\r\n      updatedLoginFormElement.validation\r\n    );\r\n    updatedLoginFormElement.touched = true;\r\n    updatedLoginForm[inputIdentifier] = updatedLoginFormElement;\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedLoginForm) {\r\n      formIsValid = updatedLoginForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({\r\n      loginForm: updatedLoginForm,\r\n      formIsValid: formIsValid,\r\n    });\r\n  };\r\n\r\n  loginHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.registerForm.email.value,\r\n      this.state.registerForm.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const loginFormElementsArray = [];\r\n    for (let key in this.state.loginForm) {\r\n      loginFormElementsArray.push({\r\n        id: key,\r\n        config: this.state.loginForm[key],\r\n      });\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={this.loginHandler}>\r\n        <img className=\"shopLogo\" src={ShopLogo} alt=\"Xpert Shop Logo\" />\r\n        <label className=\"labelTitle\">Vendosni numrin e celularit</label>\r\n        {loginFormElementsArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            labelName={formElement.config.labelName}\r\n            passwordMsg={formElement.config.passwordValidation}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            invalid={!formElement.config.valid}\r\n          />\r\n        ))}\r\n        <button type=\"submit\" className=\"loginButton\">\r\n          KYCU\r\n        </button>\r\n        <label className=\"labelQuestion\">Nuk keni Adrese?</label>\r\n        <a className=\"registerLink\" href=\"/regjistrohu\">\r\n          Rregjistrohuni\r\n        </a>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(LoginForm);\r\n"]},"metadata":{},"sourceType":"module"}